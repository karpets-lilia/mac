"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormatTypes = exports.JsonReporter = exports.CsvReporter = exports.HumanReporter = exports.QueryReporter = exports.Reporter = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os_1 = require("os");
const core_1 = require("@salesforce/core");
const chalk = require("chalk");
const ts_types_1 = require("@salesforce/ts-types");
const dataSoqlQueryTypes_1 = require("./dataSoqlQueryTypes");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'soql.query');
class Reporter {
    constructor(ux, logger) {
        this.ux = ux;
        this.logger = logger.child('reporter');
    }
    log(...args) {
        this.ux.log(...args);
    }
}
exports.Reporter = Reporter;
class QueryReporter extends Reporter {
    constructor(data, columns, ux, logger) {
        super(ux, logger);
        this.columns = [];
        this.columns = columns;
        this.data = data;
    }
}
exports.QueryReporter = QueryReporter;
class HumanReporter extends QueryReporter {
    constructor(data, columns, ux, logger) {
        super(data, columns, ux, logger);
    }
    display() {
        const { attributeNames, children, aggregates } = this.parseFields();
        const totalCount = this.data.result.records.length;
        this.soqlQuery(attributeNames, this.massageRows(this.data.result.records, children, aggregates), totalCount);
    }
    parseFields() {
        const fields = this.columns;
        // Field names
        const attributeNames = [];
        // For subqueries. Display the children under the parents
        const children = [];
        // For function fields, like avg(total).
        const aggregates = [];
        if (fields) {
            this.logger.info(`Found fields ${JSON.stringify(fields.map((field) => `${typeof field}.${field.name}`))}`);
            fields.forEach((field) => {
                var _a;
                if (field.fieldType === dataSoqlQueryTypes_1.FieldType.subqueryField) {
                    children.push(field.name);
                    ((_a = field.fields) !== null && _a !== void 0 ? _a : []).forEach((subfield) => attributeNames.push(`${field.name}.${subfield.name}`));
                }
                else if (field.fieldType === dataSoqlQueryTypes_1.FieldType.functionField) {
                    if (field.alias) {
                        attributeNames.push(field.alias);
                    }
                    else {
                        attributeNames.push(field.name);
                    }
                    aggregates.push(field);
                }
                else {
                    attributeNames.push(field.name);
                }
            });
        }
        else {
            this.logger.info(`No fields found for query "${this.data.query}"`);
        }
        return { attributeNames, children, aggregates };
    }
    soqlQuery(columns, records, totalCount) {
        this.prepNullValues(records);
        this.ux.table(records, { columns: this.prepColumns(columns) });
        this.log(chalk.bold(messages.getMessage('displayQueryRecordsRetrieved', [totalCount])));
    }
    prepNullValues(records) {
        records.forEach((record) => {
            const recordAsObject = record;
            Reflect.ownKeys(recordAsObject).forEach((propertyKey) => {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                const value = Reflect.get(recordAsObject, propertyKey);
                if (value === null) {
                    Reflect.set(recordAsObject, propertyKey, chalk.bold('null'));
                }
                else if (typeof value === 'object') {
                    this.prepNullValues([value]);
                }
            });
        });
    }
    prepColumns(columns) {
        return columns
            .map((field) => field)
            .filter((field) => field)
            .map((field) => ({
            key: field,
            label: field.toUpperCase(),
        }));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    massageRows(queryResults, children, aggregates) {
        // There are subqueries or aggregates. Massage the data.
        let qr;
        if (children.length > 0 || aggregates.length > 0) {
            qr = queryResults.reduce((newResults, result) => {
                newResults.push(result);
                // Aggregates are soql functions that aggregate data, like "SELECT avg(total)" and
                // are returned in the data as exprX. Aggregates can have aliases, like "avg(total) totalAverage"
                // and are returned in the data as the alias.
                if (aggregates.length > 0) {
                    for (let i = 0; i < aggregates.length; i++) {
                        const aggregate = aggregates[i];
                        if (!aggregate.alias) {
                            Reflect.set(result, aggregate.name, Reflect.get(result, `expr${i}`));
                        }
                    }
                }
                if (children.length > 0) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                    const childrenRows = Object.assign({});
                    children.forEach((child) => {
                        const aChild = (0, ts_types_1.get)(result, child);
                        Reflect.set(childrenRows, child, aChild);
                        Reflect.deleteProperty(result, child);
                    });
                    Reflect.ownKeys(childrenRows).forEach((child) => {
                        const childO = (0, ts_types_1.get)(childrenRows, child);
                        if (childO) {
                            const childRecords = (0, ts_types_1.getArray)(childO, 'records', []);
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            childRecords.forEach((record) => {
                                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                                const newRecord = Object.assign({});
                                Object.entries(record).forEach(([key, value]) => {
                                    Reflect.defineProperty(newRecord, `${child.toString()}.${key}`, { value });
                                });
                                newResults.push(newRecord);
                            });
                        }
                    });
                }
                return newResults;
            }, []);
        }
        return qr !== null && qr !== void 0 ? qr : queryResults;
    }
}
exports.HumanReporter = HumanReporter;
const SEPARATOR = ',';
const DOUBLE_QUOTE = '"';
const SHOULD_QUOTE_REGEXP = new RegExp(`[${SEPARATOR}${DOUBLE_QUOTE}${os_1.EOL}]`);
class CsvReporter extends QueryReporter {
    constructor(data, columns, ux, logger) {
        super(data, columns, ux, logger);
    }
    /**
     * Escape a value to be placed in a CSV row. We follow rfc 4180
     * https://tools.ietf.org/html/rfc4180#section-2 and will not surround the
     * value in quotes if it doesn't contain the separator, double quote, or EOL.
     *
     * @param value The escaped value
     */
    escape(value) {
        if (value && SHOULD_QUOTE_REGEXP.test(value)) {
            return `"${value.replace(/"/gi, '""')}"`;
        }
        return value;
    }
    display() {
        const attributeNames = this.massageRows();
        // begin output
        this.log(attributeNames
            .map((name) => {
            return this.escape(name);
        })
            .join(SEPARATOR));
        this.data.result.records.forEach((row) => {
            const values = attributeNames.map((name) => {
                const value = (0, ts_types_1.get)(row, name);
                if ((0, ts_types_1.isString)(value)) {
                    return this.escape(value);
                }
                return value;
            });
            this.log(values.join(SEPARATOR));
        });
    }
    massageRows() {
        const fields = this.columns;
        const hasSubqueries = fields.some((field) => field.fieldType === dataSoqlQueryTypes_1.FieldType.subqueryField);
        const hasFunctions = fields.some((field) => field.fieldType === dataSoqlQueryTypes_1.FieldType.functionField);
        const attributeNames = [];
        if (fields) {
            this.logger.info(`Found fields ${JSON.stringify(fields.map((field) => `${typeof field}.${field.name}`))}`);
        }
        else {
            this.logger.info(`No fields found for query "${this.data.query}"`);
        }
        if (hasSubqueries || hasFunctions) {
            // If there are subqueries, we need to get the max child length for each subquery.
            const typeLengths = new Map();
            // For function fields, like avg(total).
            const aggregates = [];
            fields.forEach((field) => {
                if (field.fieldType === dataSoqlQueryTypes_1.FieldType.subqueryField) {
                    typeLengths.set(field.name, 0);
                }
                if (field.fieldType === dataSoqlQueryTypes_1.FieldType.functionField) {
                    aggregates.push(field);
                }
            });
            // Get max lengths by iterating over the records once
            this.data.result.records.forEach((result) => {
                [...typeLengths.keys()].forEach((key) => {
                    var _a;
                    const record = (0, ts_types_1.get)(result, key);
                    const totalSize = (0, ts_types_1.getNumber)(record, 'totalSize');
                    if (!!totalSize && totalSize > ((_a = typeLengths.get(key)) !== null && _a !== void 0 ? _a : 0)) {
                        typeLengths.set(key, totalSize);
                    }
                });
                // Aggregates are soql functions that aggregate data, like "SELECT avg(total)" and
                // are returned in the data as exprX. Aggregates can have aliases, like "avg(total) totalAverage"
                // and are returned in the data as the alias.
                if (aggregates.length > 0) {
                    for (let i = 0; i < aggregates.length; i++) {
                        const aggregate = aggregates[i];
                        if (!aggregate.alias) {
                            Reflect.set(result, aggregate.name, Reflect.get(result, `expr${i}`));
                        }
                    }
                }
            });
            fields.forEach((field) => {
                var _a, _b;
                if (typeLengths.get(field.name)) {
                    for (let i = 0; i < ((_a = typeLengths.get(field.name)) !== null && _a !== void 0 ? _a : 0); i++) {
                        attributeNames.push(`${field.name}.totalSize`);
                        ((_b = field.fields) !== null && _b !== void 0 ? _b : []).forEach((subfield) => {
                            attributeNames.push(`${field.name}.records.${i}.${subfield.name}`);
                        });
                    }
                }
                else if (field.fieldType === dataSoqlQueryTypes_1.FieldType.functionField) {
                    if (field.alias) {
                        attributeNames.push(field.alias);
                    }
                    else {
                        attributeNames.push(field.name);
                    }
                }
                else {
                    attributeNames.push(field.name);
                }
            });
        }
        else {
            attributeNames.push(...fields.map((field) => field.name));
        }
        return attributeNames;
    }
}
exports.CsvReporter = CsvReporter;
class JsonReporter extends QueryReporter {
    constructor(data, columns, ux, logger) {
        super(data, columns, ux, logger);
    }
    log() {
        return;
    }
    display() {
        this.ux.styledJSON({ status: 0, result: this.data.result });
    }
}
exports.JsonReporter = JsonReporter;
/**
 * A list of the accepted reporter types
 */
exports.FormatTypes = {
    human: HumanReporter,
    csv: CsvReporter,
    json: JsonReporter,
};
//# sourceMappingURL=reporters.js.map