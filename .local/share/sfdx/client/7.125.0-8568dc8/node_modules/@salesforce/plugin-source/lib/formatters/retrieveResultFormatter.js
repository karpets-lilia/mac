"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetrieveResultFormatter = void 0;
const chalk_1 = require("chalk");
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const resultFormatter_1 = require("./resultFormatter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'retrieve');
class RetrieveResultFormatter extends resultFormatter_1.ResultFormatter {
    constructor(logger, ux, options, result) {
        super(logger, ux, options);
        this.packages = [];
        this.result = result;
        this.fileResponses = (result === null || result === void 0 ? void 0 : result.getFileResponses) ? result.getFileResponses() : [];
        const warnMessages = (0, ts_types_1.get)(result, 'response.messages', []);
        this.warnings = (0, resultFormatter_1.toArray)(warnMessages);
        this.packages = options.packages || [];
        // zipFile can become massive and unwieldy with JSON parsing/terminal output and, isn't useful
        delete this.result.response.zipFile;
    }
    /**
     * Get the JSON output from the RetrieveResult.
     *
     * @returns RetrieveCommandResult
     */
    getJson() {
        return {
            inboundFiles: this.fileResponses,
            packages: this.packages,
            warnings: this.warnings,
            response: this.result.response,
        };
    }
    /**
     * Displays retrieve results in human format.
     */
    display() {
        if (this.hasStatus(source_deploy_retrieve_1.RequestStatus.InProgress)) {
            const commandWaitTime = (0, ts_types_1.getNumber)(this.options, 'waitTime', 33);
            this.ux.log(messages.getMessage('retrieveTimeout', [commandWaitTime]));
            return;
        }
        if (this.isSuccess()) {
            this.ux.styledHeader((0, chalk_1.blue)(messages.getMessage('retrievedSourceHeader')));
            const retrievedFiles = this.fileResponses.filter((fr) => fr.state !== source_deploy_retrieve_1.ComponentStatus.Failed);
            if (retrievedFiles === null || retrievedFiles === void 0 ? void 0 : retrievedFiles.length) {
                this.displaySuccesses(retrievedFiles);
            }
            else {
                this.ux.log(messages.getMessage('NoResultsFound'));
            }
            if (this.warnings.length) {
                this.displayWarnings();
            }
        }
        else {
            this.displayErrors();
        }
        // Display any package retrievals
        if (this.packages && this.packages.length) {
            this.ux.log('');
            this.ux.styledHeader((0, chalk_1.blue)('Retrieved Packages'));
            this.packages.forEach((pkg) => {
                this.ux.log(`${pkg.name} package converted and retrieved to: ${pkg.path}`);
            });
            this.ux.log('');
        }
    }
    hasStatus(status) {
        return (0, ts_types_1.getString)(this.result, 'response.status') === status;
    }
    hasComponents() {
        return (0, ts_types_1.getNumber)(this.result, 'components.size', 0) === 0;
    }
    displayWarnings() {
        this.ux.styledHeader((0, chalk_1.yellow)(messages.getMessage('retrievedSourceWarningsHeader')));
        const columns = [
            { key: 'fileName', label: 'FILE NAME' },
            { key: 'problem', label: 'PROBLEM' },
        ];
        this.ux.table(this.warnings, { columns });
        this.ux.log();
    }
    displaySuccesses(retrievedFiles) {
        this.sortFileResponses(retrievedFiles);
        this.asRelativePaths(retrievedFiles);
        const columns = [
            { key: 'fullName', label: 'FULL NAME' },
            { key: 'type', label: 'TYPE' },
            { key: 'filePath', label: 'PROJECT PATH' },
        ];
        this.ux.table(retrievedFiles, { columns });
    }
    displayErrors() {
        // an invalid packagename retrieval will end up with a message in the `errorMessage` entry
        const errorMessage = (0, ts_types_1.get)(this.result.response, 'errorMessage');
        if (errorMessage) {
            throw new core_1.SfdxError(errorMessage);
        }
        const unknownMsg = [{ fileName: 'unknown', problem: 'unknown' }];
        const responseMsgs = (0, ts_types_1.get)(this.result, 'response.messages', unknownMsg);
        const errMsgs = (0, resultFormatter_1.toArray)(responseMsgs);
        const errMsgsForDisplay = errMsgs.reduce((p, c) => `${p}\n${c.fileName}: ${c.problem}`, '');
        this.ux.log(`Retrieve Failed due to: ${errMsgsForDisplay}`);
    }
}
exports.RetrieveResultFormatter = RetrieveResultFormatter;
//# sourceMappingURL=retrieveResultFormatter.js.map