"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceCommand = void 0;
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const cli_ux_1 = require("cli-ux");
class SourceCommand extends command_1.SfdxCommand {
    constructor() {
        super(...arguments);
        this.xorFlags = [];
        this.lifecycle = core_1.Lifecycle.getInstance();
    }
    isJsonOutput() {
        return (0, ts_types_1.getBoolean)(this.flags, 'json', false);
    }
    validateFlags() {
        // verify that the user defined one of the flag names specified in requiredFlags property
        if (!Object.keys(this.flags).some((flag) => this.xorFlags.includes(flag))) {
            throw core_1.SfdxError.create('@salesforce/plugin-source', 'deploy', 'MissingRequiredParam', [this.xorFlags.join(', ')]);
        }
    }
    getFlag(flagName, defaultVal) {
        return (0, ts_types_1.get)(this.flags, flagName, defaultVal);
    }
    initProgressBar() {
        this.logger.debug('initializing progress bar');
        this.progressBar = cli_ux_1.default.progress({
            format: 'SOURCE PROGRESS | {bar} | {value}/{total} Components',
            barCompleteChar: '\u2588',
            barIncompleteChar: '\u2591',
            linewrap: true,
        });
    }
    /**
     * Sets an exit code on the process that marks success or failure
     * after successful command execution.
     *
     * @param code The exit code to set on the process.
     */
    setExitCode(code) {
        process.exitCode = code;
    }
    getPackageDirs() {
        return this.project.getUniquePackageDirectories().map((pDir) => pDir.fullPath);
    }
    async getSourceApiVersion() {
        const projectConfig = await this.project.resolveProjectConfig();
        return (0, ts_types_1.getString)(projectConfig, 'sourceApiVersion');
    }
}
exports.SourceCommand = SourceCommand;
SourceCommand.DEFAULT_SRC_WAIT_MINUTES = 33;
//# sourceMappingURL=sourceCommand.js.map