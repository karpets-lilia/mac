"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cancel = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const ts_types_1 = require("@salesforce/ts-types");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const deployCommand_1 = require("../../../../deployCommand");
const deployCancelResultFormatter_1 = require("../../../../formatters/deployCancelResultFormatter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'cancel');
class Cancel extends deployCommand_1.DeployCommand {
    async run() {
        await this.cancel();
        this.resolveSuccess();
        return this.formatResult();
    }
    async cancel() {
        const deployId = this.resolveDeployId(this.getFlag('jobid'));
        // TODO: update to use SDRL. This matches the toolbelt implementation.
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment
        await this.org.getConnection().metadata['_invoke']('cancelDeploy', {
            deployId,
        });
        this.deployResult = await this.poll(deployId);
    }
    resolveSuccess() {
        const status = (0, ts_types_1.getString)(this.deployResult, 'response.status');
        if (status !== source_deploy_retrieve_1.RequestStatus.Canceled) {
            this.setExitCode(1);
        }
    }
    formatResult() {
        const formatter = new deployCancelResultFormatter_1.DeployCancelResultFormatter(this.logger, this.ux, this.deployResult);
        if (!this.isJsonOutput()) {
            formatter.display();
        }
        return formatter.getJson();
    }
}
exports.Cancel = Cancel;
Cancel.description = messages.getMessage('description');
Cancel.examples = messages.getMessage('examples').split(os.EOL);
Cancel.requiresUsername = true;
Cancel.flagsConfig = {
    wait: command_1.flags.minutes({
        char: 'w',
        default: kit_1.Duration.minutes(deployCommand_1.DeployCommand.DEFAULT_SRC_WAIT_MINUTES),
        min: kit_1.Duration.minutes(1),
        description: messages.getMessage('flags.wait'),
        longDescription: messages.getMessage('flagsLong.wait'),
    }),
    jobid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('flags.jobid'),
    }),
};
//# sourceMappingURL=cancel.js.map