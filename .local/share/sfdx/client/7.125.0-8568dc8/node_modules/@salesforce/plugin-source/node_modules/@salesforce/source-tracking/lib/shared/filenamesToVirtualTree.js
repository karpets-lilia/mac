"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.filenamesToVirtualTree = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path = require("path");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
/**
 * @deprecated this is moving to SDR
 * Designed for recreating virtual files from deleted files where the only information we have is the file's former location
 * Any use of MetadataResolver was trying to access the non-existent files and throwing
 *
 * @param filenames full paths to files
 * @returns VirtualTreeContainer to use with MetadataResolver
 */
const filenamesToVirtualTree = (filenames) => {
    // a map to reduce array iterations
    const virtualDirectoryByFullPath = new Map();
    filenames.map((filename) => {
        var _a;
        const splits = filename.split(path.sep);
        for (let i = 0; i < splits.length - 1; i++) {
            const fullPathSoFar = splits.slice(0, i + 1).join(path.sep);
            const existing = virtualDirectoryByFullPath.get(fullPathSoFar);
            virtualDirectoryByFullPath.set(fullPathSoFar, {
                dirPath: fullPathSoFar,
                // only add to children if we don't already have it
                children: Array.from(new Set((_a = existing === null || existing === void 0 ? void 0 : existing.children) !== null && _a !== void 0 ? _a : []).add(splits[i + 1])),
            });
        }
    });
    return new source_deploy_retrieve_1.VirtualTreeContainer(Array.from(virtualDirectoryByFullPath.values()));
};
exports.filenamesToVirtualTree = filenamesToVirtualTree;
//# sourceMappingURL=filenamesToVirtualTree.js.map