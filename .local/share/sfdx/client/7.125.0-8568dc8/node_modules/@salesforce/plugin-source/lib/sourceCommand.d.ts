import { SfdxCommand } from '@salesforce/command';
import { Lifecycle } from '@salesforce/core';
import { ComponentSet } from '@salesforce/source-deploy-retrieve';
import { Optional } from '@salesforce/ts-types';
export declare type ProgressBar = {
    start: (num: number) => void;
    update: (num: number) => void;
    updateTotal: (num: number) => void;
    setTotal: (num: number) => void;
    stop: () => void;
};
export declare abstract class SourceCommand extends SfdxCommand {
    static readonly DEFAULT_SRC_WAIT_MINUTES = 33;
    protected xorFlags: string[];
    protected progressBar?: ProgressBar;
    protected lifecycle: Lifecycle;
    protected componentSet?: ComponentSet;
    protected isJsonOutput(): boolean;
    protected validateFlags(): void;
    protected getFlag<T>(flagName: string, defaultVal?: unknown): T;
    protected initProgressBar(): void;
    /**
     * Sets an exit code on the process that marks success or failure
     * after successful command execution.
     *
     * @param code The exit code to set on the process.
     */
    protected setExitCode(code: number): void;
    protected getPackageDirs(): string[];
    protected getSourceApiVersion(): Promise<Optional<string>>;
    /**
     * Inspects the command response to determine success.
     *
     * NOTE: This is not about unexpected command errors such as timeouts,
     * or command flag parsing errors, but a successful
     * command execution's results. E.g., the deploy command
     * ran successfully but had ApexClass compilation errors,
     * so the deployment was unsuccessful.
     */
    protected abstract resolveSuccess(): void;
    /**
     * Formats the JSON returned by the command and optionally
     * (if --json is not set) displays output to the console.
     */
    protected abstract formatResult(): any;
}
