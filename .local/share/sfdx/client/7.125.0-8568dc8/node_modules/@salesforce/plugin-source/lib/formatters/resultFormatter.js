"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultFormatter = exports.toArray = void 0;
const path = require("path");
const ts_types_1 = require("@salesforce/ts-types");
function toArray(entryOrArray) {
    if (entryOrArray) {
        return Array.isArray(entryOrArray) ? entryOrArray : [entryOrArray];
    }
    return [];
}
exports.toArray = toArray;
class ResultFormatter {
    constructor(logger, ux, options = {}) {
        this.logger = logger;
        this.ux = ux;
        this.options = options;
    }
    // Command success is determined by the command so it can set the
    // exit code on the process, which is done before formatting.
    isSuccess() {
        return (0, ts_types_1.getNumber)(process, 'exitCode', 0) === 0;
    }
    isVerbose() {
        return (0, ts_types_1.getBoolean)(this.options, 'verbose', false);
    }
    isQuiet() {
        return (0, ts_types_1.getBoolean)(this.options, 'quiet', false);
    }
    // Sort by type > filePath > fullName
    sortFileResponses(fileResponses) {
        fileResponses.sort((i, j) => {
            if (i.type === j.type) {
                if (i.filePath === j.filePath) {
                    return i.fullName > j.fullName ? 1 : -1;
                }
                return i.filePath > j.filePath ? 1 : -1;
            }
            return i.type > j.type ? 1 : -1;
        });
    }
    sortTestResults(results = []) {
        return results.sort((a, b) => {
            if (a.methodName === b.methodName) {
                return a.name > b.name ? 1 : -1;
            }
            return a.methodName > b.methodName ? 1 : -1;
        });
    }
    // Convert absolute paths to relative for better table output.
    asRelativePaths(fileResponses) {
        fileResponses.forEach((file) => {
            if (file.filePath) {
                file.filePath = path.relative(process.cwd(), file.filePath);
            }
        });
    }
}
exports.ResultFormatter = ResultFormatter;
//# sourceMappingURL=resultFormatter.js.map