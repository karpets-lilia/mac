"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@salesforce/core");
const alias_1 = require("../../alias");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-alias', 'unset');
class Unset extends alias_1.AliasCommand {
    run() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const argv = this.parseArgs();
            if (!argv || argv.length === 0) {
                throw core_1.SfdxError.create('@salesforce/plugin-alias', 'unset', 'NoAliasKeysFound', []);
            }
            else {
                const results = [];
                const aliases = yield core_1.Aliases.create(core_1.Aliases.getDefaultOptions());
                argv.forEach((key) => {
                    try {
                        aliases.unset(key);
                        results.push({ alias: key, success: true });
                    }
                    catch (error) {
                        const err = error;
                        process.exitCode = 1;
                        results.push({ alias: key, success: false, error: err });
                    }
                });
                yield aliases.write();
                this.output(alias_1.Command.Unset, results);
                return results;
            }
        });
    }
}
exports.default = Unset;
Unset.description = messages.getMessage('description');
Unset.strict = false;
//# sourceMappingURL=unset.js.map