import { ConfigFile, Logger } from '@salesforce/core';
import { RemoteSyncInput } from '../shared/types';
export declare type MemberRevision = {
    serverRevisionCounter: number;
    lastRetrievedFromServer: number | null;
    memberType: string;
    isNameObsolete: boolean;
};
export declare type SourceMember = {
    MemberType: string;
    MemberName: string;
    IsNameObsolete: boolean;
    RevisionCounter: number;
};
export declare type RemoteChangeElement = {
    name: string;
    type: string;
    deleted?: boolean;
    modified?: boolean;
};
export declare namespace RemoteSourceTrackingService {
    interface Options extends ConfigFile.Options {
        orgId: string;
        /** only used for connecting to the org */
        username: string;
    }
}
export declare const getMetadataKey: (metadataType: string, metadataName: string) => string;
/**
 * This service handles source tracking of metadata between a local project and an org.
 * Source tracking state is persisted to .sfdx/orgs/<orgId>/maxRevision.json.
 * This JSON file keeps track of `SourceMember` objects and the `serverMaxRevisionCounter`,
 * which is the highest `serverRevisionCounter` value of all the tracked elements.
 *
 * Each SourceMember object has 4 fields:
 * * serverRevisionCounter: the current RevisionCounter on the server for this object
 * * lastRetrievedFromServer: the RevisionCounter last retrieved from the server for this object
 * * memberType: the metadata name of the SourceMember
 * * isNameObsolete: `true` if this object has been deleted in the org
 *
 * ex.
 ```
 {
    serverMaxRevisionCounter: 3,
    sourceMembers: {
      ApexClass__MyClass: {
        serverRevisionCounter: 3,
        lastRetrievedFromServer: 2,
        memberType: ApexClass,
        isNameObsolete: false
      },
      CustomObject__Student__c: {
        serverRevisionCounter: 1,
        lastRetrievedFromServer: 1,
        memberType: CustomObject,
        isNameObsolete: false
      }
    }
  }
  ```
 * In this example, `ApexClass__MyClass` has been changed in the org because the `serverRevisionCounter` is different
 * from the `lastRetrievedFromServer`. When a pull is performed, all of the pulled members will have their counters set
 * to the corresponding `RevisionCounter` from the `SourceMember` of the org.
 */
export declare class RemoteSourceTrackingService extends ConfigFile<RemoteSourceTrackingService.Options> {
    private static remoteSourceTrackingServiceDictionary;
    protected logger: Logger;
    private org;
    private isSourceTrackedOrg;
    private queryCache;
    /**
     * Get the singleton instance for a given user.
     *
     * @param {RemoteSourceTrackingService.Options} options that contain the org's username
     * @returns {Promise<RemoteSourceTrackingService>} the remoteSourceTrackingService object for the given username
     */
    static getInstance(options: RemoteSourceTrackingService.Options): Promise<RemoteSourceTrackingService>;
    static getFileName(): string;
    static getFilePath(orgId: string): string;
    static delete(orgId: string): Promise<string>;
    /**
     * Initializes the service with existing remote source tracking data, or sets
     * the state to begin source tracking of metadata changes in the org.
     */
    init(): Promise<void>;
    /**
     * pass in a set of metadata keys (type__name like 'ApexClass__MyClass').\
     * it sets their last retrieved revision to the current revision counter from the server.
     */
    syncSpecifiedElements(elements: RemoteSyncInput[]): Promise<void>;
    /**
     * Returns the `ChangeElement` currently being tracked given a metadata key,
     * or `undefined` if not found.
     *
     * @param key string of the form, `<type>__<name>` e.g.,`ApexClass__MyClass`
     */
    getTrackedElement(key: string): RemoteChangeElement | undefined;
    /**
     * Returns an array of `ChangeElements` currently being tracked.
     */
    getTrackedElements(): RemoteChangeElement[];
    /**
     * Resets source tracking state by first clearing all tracked data, then
     * queries and synchronizes SourceMembers from the associated org.
     *
     * If a toRevision is passed, it will query for all `SourceMembers` with
     * a `RevisionCounter` less than or equal to the provided revision number.
     *
     * When no toRevision is passed, it will query and sync all `SourceMembers`.
     *
     * @param toRevision The `RevisionCounter` number to sync to.
     */
    reset(toRevision?: number): Promise<string[]>;
    private static convertRevisionToChange;
    private getServerMaxRevision;
    private setServerMaxRevision;
    private getSourceMembers;
    private initSourceMembers;
    private getSourceMember;
    private setMemberRevision;
    private getTypedContents;
    trackSourceMembers(sourceMembers: SourceMember[], sync?: boolean): Promise<void>;
    /**
     * Queries the org for any new, updated, or deleted metadata and updates
     * source tracking state.  All `ChangeElements` not in sync with the org
     * are returned.
     */
    retrieveUpdates({ sync, cache }?: {
        sync?: boolean | undefined;
        cache?: boolean | undefined;
    }): Promise<RemoteChangeElement[]>;
    /**
     * Polls the org for SourceMember objects matching the provided metadata member names,
     * stopping when all members have been matched or the polling timeout is met or exceeded.
     * NOTE: This can be removed when the Team Dependency (TD-0085369) for W-7737094 is delivered.
     *
     * @param expectedMemberNames Array of metadata names to poll
     * @param pollingTimeout maximum amount of time in seconds to poll for SourceMembers
     */
    pollForSourceTracking(expectedMembers: RemoteSyncInput[]): Promise<void>;
    private calculateTimeout;
    private querySourceMembersFrom;
    private querySourceMembersTo;
    private query;
}
