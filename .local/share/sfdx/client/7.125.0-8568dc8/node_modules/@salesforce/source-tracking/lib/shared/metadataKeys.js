"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMetadataKeyFromFileResponse = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path = require("path");
const remoteSourceTrackingService_1 = require("./remoteSourceTrackingService");
// LWC can have child folders (ex: dynamic templates like /templates/noDataIllustration.html
const pathAfterFullName = (fileResponse) => fileResponse && fileResponse.filePath
    ? fileResponse.filePath.substr(fileResponse.filePath.indexOf(fileResponse.fullName)).replace(/\\/gi, '/')
    : '';
// handle all "weird" type/name translation between SourceMember and SDR FileResponse
// These get de-duplicated in a set later, so it's ok to have one per file
const getMetadataKeyFromFileResponse = (fileResponse) => {
    // also create an element for the parent object
    if (fileResponse.type === 'CustomField' && fileResponse.filePath) {
        const splits = path.normalize(fileResponse.filePath).split(path.sep);
        const objectFolderIndex = splits.indexOf('objects');
        return [
            (0, remoteSourceTrackingService_1.getMetadataKey)('CustomObject', splits[objectFolderIndex + 1]),
            (0, remoteSourceTrackingService_1.getMetadataKey)(fileResponse.type, fileResponse.fullName),
        ];
    }
    // Aura/LWC need to have both the bundle level and file level keys
    if (fileResponse.type === 'LightningComponentBundle' && fileResponse.filePath) {
        return [
            `LightningComponentResource__${pathAfterFullName(fileResponse)}`,
            (0, remoteSourceTrackingService_1.getMetadataKey)(fileResponse.type, fileResponse.fullName),
        ];
    }
    if (fileResponse.type === 'AuraDefinitionBundle' && fileResponse.filePath) {
        return [
            `AuraDefinition__${pathAfterFullName(fileResponse)}`,
            (0, remoteSourceTrackingService_1.getMetadataKey)(fileResponse.type, fileResponse.fullName),
        ];
    }
    // standard key
    return [(0, remoteSourceTrackingService_1.getMetadataKey)(fileResponse.type, fileResponse.fullName)];
};
exports.getMetadataKeyFromFileResponse = getMetadataKeyFromFileResponse;
//# sourceMappingURL=metadataKeys.js.map