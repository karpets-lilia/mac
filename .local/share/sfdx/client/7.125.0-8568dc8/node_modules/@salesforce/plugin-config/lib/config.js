"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigCommand = void 0;
const command_1 = require("@salesforce/command");
const chalk = require("chalk");
class ConfigCommand extends command_1.SfdxCommand {
    constructor() {
        super(...arguments);
        this.responses = [];
    }
    output(header, verbose) {
        if (this.responses.length === 0) {
            this.ux.log('No results found');
            return;
        }
        this.ux.styledHeader(chalk.blue(header));
        const values = {
            columns: [{ key: 'name', label: 'Name' }],
        };
        if (!header.includes('Unset')) {
            values.columns.push({ key: 'value', label: 'Value' });
        }
        if (!header.includes('List')) {
            values.columns.push({ key: 'success', label: 'Success' });
        }
        if (verbose) {
            values.columns.push({ key: 'location', label: 'Location' });
        }
        this.ux.table(this.responses, values);
        this.responses.forEach((response) => {
            if (response.error) {
                throw response.error;
            }
        });
    }
    parseArgs() {
        const { argv } = this.parse({
            flags: this.statics.flags,
            args: this.statics.args,
            strict: this.statics.strict,
        });
        return argv;
    }
    formatResults() {
        return {
            successes: this.responses
                .filter((response) => response.success)
                .map((success) => ({
                name: success.name,
                value: success.value,
            })),
            failures: this.responses
                .filter((response) => !response.success)
                .map((failure) => ({
                name: failure.name,
                message: failure.error.message,
            })),
        };
    }
}
exports.ConfigCommand = ConfigCommand;
//# sourceMappingURL=config.js.map