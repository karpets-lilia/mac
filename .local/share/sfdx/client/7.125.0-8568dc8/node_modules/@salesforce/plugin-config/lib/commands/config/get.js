"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Get = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const config_1 = require("../../config");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-config', 'get');
class Get extends config_1.ConfigCommand {
    async run() {
        const argv = this.parseArgs();
        if (!argv || argv.length === 0) {
            throw core_1.SfdxError.create('@salesforce/plugin-config', 'get', 'NoConfigKeysFound', []);
        }
        else {
            const results = [];
            const aggregator = await core_1.ConfigAggregator.create();
            argv.forEach((configName) => {
                try {
                    const configInfo = aggregator.getInfo(configName);
                    results.push(configInfo);
                    this.responses.push({
                        name: configInfo.key,
                        value: configInfo.value,
                        success: true,
                        location: configInfo.location,
                    });
                }
                catch (err) {
                    this.responses.push({
                        name: configName,
                        success: false,
                        error: err,
                    });
                }
            });
            this.output('Get Config', this.flags.verbose);
            return results;
        }
    }
}
exports.Get = Get;
Get.description = messages.getMessage('description');
Get.examples = messages.getMessage('examples').split(os.EOL);
Get.strict = false;
Get.flagsConfig = {
    verbose: command_1.flags.builtin(),
};
Get.aliases = ['force:config:get'];
//# sourceMappingURL=get.js.map