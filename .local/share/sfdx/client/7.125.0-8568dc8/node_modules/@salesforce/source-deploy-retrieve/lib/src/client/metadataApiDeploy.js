"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataApiDeploy = exports.DeployResult = void 0;
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const ts_types_1 = require("@salesforce/ts-types");
const convert_1 = require("../convert");
const utils_1 = require("../utils");
const collections_1 = require("../collections");
const registry_1 = require("../registry");
const errors_1 = require("../errors");
const metadataTransfer_1 = require("./metadataTransfer");
const types_1 = require("./types");
const diagnosticUtil_1 = require("./diagnosticUtil");
class DeployResult {
    constructor(response, components) {
        this.diagnosticUtil = new diagnosticUtil_1.DiagnosticUtil('metadata');
        this.response = response;
        this.components = components;
    }
    getFileResponses() {
        // TODO: Log when messages can't be mapped to components
        const messages = this.getDeployMessages(this.response);
        const fileResponses = [];
        for (const deployedComponent of this.components.getSourceComponents()) {
            if (deployedComponent.type.children) {
                for (const child of deployedComponent.getChildren()) {
                    const childMessages = messages.get(this.key(child));
                    if (childMessages) {
                        fileResponses.push(...this.createResponses(child, childMessages));
                    }
                }
            }
            const componentMessages = messages.get(this.key(deployedComponent));
            if (componentMessages) {
                fileResponses.push(...this.createResponses(deployedComponent, componentMessages));
            }
        }
        return fileResponses;
    }
    createResponses(component, messages) {
        const { fullName, type, xml, content } = component;
        const responses = [];
        for (const message of messages) {
            const baseResponse = {
                fullName,
                type: type.name,
                state: this.getState(message),
            };
            if (baseResponse.state === types_1.ComponentStatus.Failed) {
                const diagnostic = this.diagnosticUtil.parseDeployDiagnostic(component, message);
                const response = Object.assign(baseResponse, diagnostic);
                responses.push(response);
            }
            else {
                // components with children are already taken care of through the messages,
                // so don't walk their content directories.
                if (content && !type.children) {
                    for (const filePath of component.walkContent()) {
                        const response = Object.assign({}, baseResponse, { filePath });
                        responses.push(response);
                    }
                }
                if (xml) {
                    const response = Object.assign({}, baseResponse, { filePath: xml });
                    responses.push(response);
                }
            }
        }
        return responses;
    }
    getState(message) {
        if (message.created === 'true') {
            return types_1.ComponentStatus.Created;
        }
        else if (message.changed === 'true') {
            return types_1.ComponentStatus.Changed;
        }
        else if (message.deleted === 'true') {
            return types_1.ComponentStatus.Deleted;
        }
        else if (message.success === 'false') {
            return types_1.ComponentStatus.Failed;
        }
        return types_1.ComponentStatus.Unchanged;
    }
    /**
     * Groups messages from the deploy result by component fullName and type
     */
    getDeployMessages(result) {
        const messageMap = new Map();
        const failedComponents = new collections_1.ComponentSet();
        const failureMessages = (0, utils_1.normalizeToArray)(result.details.componentFailures);
        const successMessages = (0, utils_1.normalizeToArray)(result.details.componentSuccesses);
        for (const failure of failureMessages) {
            const sanitized = this.sanitizeDeployMessage(failure);
            const componentLike = {
                fullName: sanitized.fullName,
                type: sanitized.componentType,
            };
            const key = this.key(componentLike);
            if (!messageMap.has(key)) {
                messageMap.set(key, []);
            }
            messageMap.get(key).push(sanitized);
            failedComponents.add(componentLike);
        }
        for (const success of successMessages) {
            const sanitized = this.sanitizeDeployMessage(success);
            const componentLike = {
                fullName: sanitized.fullName,
                type: sanitized.componentType,
            };
            const key = this.key(componentLike);
            // this will ensure successes aren't reported if there is a failure for
            // the same component. e.g. lwc returns failures and successes
            if (!failedComponents.has(componentLike)) {
                messageMap.set(key, [sanitized]);
            }
        }
        return messageMap;
    }
    /**
     * Fix any issues with the deploy message returned by the api.
     * TODO: remove cases if fixes are made in the api.
     */
    sanitizeDeployMessage(message) {
        switch (message.componentType) {
            case registry_1.registry.types.lightningcomponentbundle.name:
                // remove the markup scheme from fullName
                message.fullName = message.fullName.replace(/markup:\/\/c:/, '');
                break;
            case registry_1.registry.types.document.name:
                // strip document extension from fullName
                message.fullName = (0, path_1.join)((0, path_1.dirname)(message.fullName), (0, path_1.basename)(message.fullName, (0, path_1.extname)(message.fullName)));
                break;
            default:
        }
        return message;
    }
    key(component) {
        const type = typeof component.type === 'string' ? component.type : component.type.name;
        return `${type}#${component.fullName}`;
    }
}
exports.DeployResult = DeployResult;
class MetadataApiDeploy extends metadataTransfer_1.MetadataTransfer {
    constructor(options) {
        super(options);
        options.apiOptions = { ...MetadataApiDeploy.DEFAULT_OPTIONS.apiOptions, ...options.apiOptions };
        this.options = Object.assign({}, options);
    }
    /**
     * Deploy recently validated components without running Apex tests. Requires the operation to have been
     * created with the `{ checkOnly: true }` API option.
     *
     * Ensure that the following requirements are met before deploying a recent validation:
     * - The components have been validated successfully for the target environment within the last 10 days.
     * - As part of the validation, Apex tests in the target org have passed.
     * - Code coverage requirements are met.
     * - If all tests in the org or all local tests are run, overall code coverage is at least 75%, and Apex triggers have some coverage.
     * - If specific tests are run with the RunSpecifiedTests test level, each class and trigger that was deployed is covered by at least 75% individually.
     *
     * See [deployRecentValidation()](https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deployRecentValidation.htm)
     *
     * @param rest - Set to `true` to use the REST API, otherwise defaults to using SOAP
     * @returns The ID of the quick deployment
     */
    async deployRecentValidation(rest = false) {
        if (!this.id) {
            throw new errors_1.MissingJobIdError('deploy');
        }
        const conn = await this.getConnection();
        const response = (await conn.deployRecentValidation({
            id: this.id,
            rest,
        }));
        return (0, ts_types_1.isString)(response) ? response : response.id;
    }
    /**
     * Check the status of the deploy operation.
     *
     * @returns Status of the deploy
     */
    async checkStatus() {
        if (!this.id) {
            throw new errors_1.MissingJobIdError('deploy');
        }
        const connection = await this.getConnection();
        // Recasting to use the project's version of the type
        return connection.metadata.checkDeployStatus(this.id, true);
    }
    /**
     * Cancel the deploy operation.
     *
     * Deploys are asynchronously canceled. Once the cancel request is made to the org,
     * check the status of the cancellation with `checkStatus`.
     */
    async cancel() {
        if (!this.id) {
            throw new errors_1.MissingJobIdError('deploy');
        }
        const connection = await this.getConnection();
        await new Promise((resolve, reject) => {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,no-underscore-dangle
            connection.metadata
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore _invoke is private on the jsforce metadata object, and cancelDeploy is not an exposed method
                ._invoke('cancelDeploy', { id: this.id })
                .thenCall((result) => {
                // this does not return CancelDeployResult as documented in the API.
                // a null result seems to indicate the request was successful
                if (result) {
                    reject(result);
                }
                else {
                    resolve(result);
                }
            });
        });
    }
    async pre() {
        const converter = new convert_1.MetadataConverter();
        const { zipBuffer } = await converter.convert(this.components, 'metadata', { type: 'zip' });
        const connection = await this.getConnection();
        await this.maybeSaveTempDirectory('metadata');
        return connection.deploy(zipBuffer, this.options.apiOptions);
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async post(result) {
        return new DeployResult(result, this.components);
    }
}
exports.MetadataApiDeploy = MetadataApiDeploy;
MetadataApiDeploy.DEFAULT_OPTIONS = {
    apiOptions: {
        rollbackOnError: true,
        ignoreWarnings: false,
        checkOnly: false,
        singlePackage: true,
        rest: false,
    },
};
//# sourceMappingURL=metadataApiDeploy.js.map