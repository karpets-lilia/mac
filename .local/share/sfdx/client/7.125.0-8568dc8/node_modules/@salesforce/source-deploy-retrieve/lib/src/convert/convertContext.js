"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConvertContext = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const ts_types_1 = require("@salesforce/ts-types");
const kit_1 = require("@salesforce/kit");
const common_1 = require("../common");
const collections_1 = require("../collections");
const utils_1 = require("../utils");
const streams_1 = require("./streams");
class ConvertTransactionFinalizer {
    setState(props) {
        props(this.transactionState);
    }
    get state() {
        return this.transactionState;
    }
}
/**
 * Merges child components that share the same parent in the conversion pipeline
 * into a single file.
 */
class RecompositionFinalizer extends ConvertTransactionFinalizer {
    constructor() {
        super(...arguments);
        this.transactionState = {};
        // A cache of SourceComponent xml file paths to parsed contents so that identical child xml
        // files are not read and parsed multiple times.
        this.parsedXmlCache = new Map();
    }
    async finalize() {
        const writerData = [];
        for (const { component: parent, children } of Object.values(this.state)) {
            const recomposedXmlObj = await this.recompose(children, parent);
            writerData.push({
                component: parent,
                writeInfos: [
                    {
                        source: new streams_1.JsToXml(recomposedXmlObj),
                        output: (0, path_1.join)(parent.type.directoryName, `${parent.fullName}.${parent.type.suffix}`),
                    },
                ],
            });
        }
        return writerData;
    }
    async recompose(children, parent) {
        // When recomposing children that are non-decomposed, read and cache the parent XML to prevent
        // reading the parent source file (referenced in all child SourceComponents) multiple times.
        let parentXml;
        if (parent.type.strategies.transformer === "nonDecomposed" /* NonDecomposed */) {
            parentXml = await parent.parseXml();
            this.parsedXmlCache.set(parent.xml, parentXml);
        }
        const parentXmlObj = parent.type.strategies.recomposition === "startEmpty" /* StartEmpty */
            ? {}
            : parentXml !== null && parentXml !== void 0 ? parentXml : (await parent.parseXml());
        for (const child of children) {
            const { directoryName: groupName } = child.type;
            const { name: parentName } = child.parent.type;
            const childSourceComponent = child;
            let xmlObj;
            if (parentXml) {
                // If the xml file for the child is in the cache, use it. Otherwise
                // read and cache the xml file that contains this child and use it.
                if (!this.parsedXmlCache.has(childSourceComponent.xml)) {
                    this.parsedXmlCache.set(childSourceComponent.xml, await parent.parseXml(childSourceComponent.xml));
                }
                xmlObj = childSourceComponent.parseFromParentXml(this.parsedXmlCache.get(childSourceComponent.xml));
            }
            else {
                xmlObj = await childSourceComponent.parseXml();
            }
            const childContents = xmlObj[child.type.name] || xmlObj;
            if (!parentXmlObj[parentName]) {
                parentXmlObj[parentName] = { [common_1.XML_NS_KEY]: common_1.XML_NS_URL };
            }
            // type safe way of checking childContents for the key
            if ((0, ts_types_1.getString)(childContents, common_1.XML_NS_KEY)) {
                // child don't need to be written with `xmlns="http://soap.sforce.com/2006/04/metadata"` attribute
                delete childContents[common_1.XML_NS_KEY];
            }
            const parentObj = parentXmlObj[parentName];
            if (!parentObj[groupName]) {
                parentObj[groupName] = [];
            }
            // it might be an object and not an array.  Example: custom object with a Field property containing a single field
            const group = (0, utils_1.normalizeToArray)(parentObj[groupName]);
            group.push(childContents);
        }
        return parentXmlObj;
    }
}
/**
 * Creates write infos for any children that haven't been written yet. Children may
 * delay being written in order to find potential existing children to merge
 * with in the conversion pipeline.
 */
class DecompositionFinalizer extends ConvertTransactionFinalizer {
    constructor() {
        super(...arguments);
        this.transactionState = {};
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async finalize() {
        var _a;
        const writerData = [];
        for (const toDecompose of Object.values(this.transactionState)) {
            if (!toDecompose.foundMerge) {
                writerData.push({
                    component: (_a = toDecompose.origin.parent) !== null && _a !== void 0 ? _a : toDecompose.origin,
                    writeInfos: [toDecompose.writeInfo],
                });
            }
        }
        return writerData;
    }
}
/**
 * Merges child components that share the same parent in the conversion pipeline
 * into a single file.
 *
 * Inserts unclaimed child components into the parent that belongs to the default package
 */
class NonDecompositionFinalizer extends ConvertTransactionFinalizer {
    constructor() {
        super(...arguments);
        this.transactionState = {
            unclaimed: {},
            claimed: {},
        };
    }
    async finalize(defaultDirectory) {
        await this.finalizeState(defaultDirectory);
        const writerData = [];
        for (const { parent, children } of Object.values(this.state.claimed)) {
            const recomposedXmlObj = await this.recompose(Object.values(children), parent);
            writerData.push({
                component: parent,
                writeInfos: [{ source: new streams_1.JsToXml(recomposedXmlObj), output: parent.xml }],
            });
        }
        for (const { parent, children } of Object.values(this.state.unclaimed)) {
            const recomposedXmlObj = await this.recompose(Object.values(children), parent);
            writerData.push({
                component: parent,
                writeInfos: [{ source: new streams_1.JsToXml(recomposedXmlObj), output: this.getDefaultOutput(parent) }],
            });
        }
        return writerData;
    }
    /**
     * This method finalizes the state by:
     * - finding any "unprocessed components" (nondecomposed metadata types can exist in multiple locations under the same name so we have to find all components that could potentially claim children)
     * - removing any children from the unclaimed state that have been claimed by the unprocessed components
     * - removing any children from the unclaimed state that have already been claimed by a prent in the claimed state
     * - merging the remaining unclaimed children into the default parent component (either the component that matches the defaultDirectory or the first parent component)
     */
    async finalizeState(defaultDirectory) {
        if ((0, kit_1.isEmpty)(this.state.claimed)) {
            return;
        }
        const unprocessedComponents = this.getUnprocessedComponents(defaultDirectory);
        const parentPaths = Object.keys(this.state.claimed).concat(unprocessedComponents.map((c) => c.xml));
        const defaultComponentKey = parentPaths.find((p) => p.startsWith(defaultDirectory)) || parentPaths[0];
        const claimedChildren = [
            ...this.getClaimedChildrenNames(),
            ...(await this.getChildrenOfUnprocessedComponents(unprocessedComponents)),
        ];
        // merge unclaimed children into default parent component
        for (const [key, childIndex] of Object.entries(this.state.unclaimed)) {
            const pruned = Object.entries(childIndex.children).reduce((result, [childName, childXml]) => {
                return !claimedChildren.includes(childName) ? Object.assign(result, { [childName]: childXml }) : result;
            }, {});
            delete this.state.unclaimed[key];
            if (this.state.claimed[defaultComponentKey]) {
                this.state.claimed[defaultComponentKey].children = Object.assign({}, this.state.claimed[defaultComponentKey].children, pruned);
            }
        }
    }
    /**
     * Returns the "unprocessed components"
     *
     * An unprocessed component is a component that was not resolved during component resolution.
     * This typically only happens when a specific source path was resolved. This is problematic for
     * nondecomposed metadata types (like CustomLabels) because we need to know the location of each
     * child type before recomposing the final xml. So in order for each of the children to be properly
     * claimed, we have to create new ComponentSet that will have all the parent components.
     */
    getUnprocessedComponents(defaultDirectory) {
        if ((0, kit_1.isEmpty)(this.state.unclaimed)) {
            return [];
        }
        const parents = this.getParentsOfClaimedChildren();
        const filterSet = new collections_1.ComponentSet(parents);
        const { tree } = parents[0];
        const projectDir = (0, path_1.resolve)((0, path_1.dirname)(defaultDirectory));
        const parentDirs = Object.keys(this.state.claimed).map((k) => {
            const parts = k.split(path_1.sep);
            const partIndex = parts.findIndex((p) => (0, path_1.basename)(projectDir) === p);
            return parts[partIndex + 1];
        });
        const fsPaths = tree
            .readDirectory(projectDir)
            .map((p) => (0, path_1.join)(projectDir, p))
            .filter((p) => {
            const dirName = (0, path_1.basename)(p);
            // Only return directories that are likely to be a project directory
            return (tree.isDirectory(p) &&
                !dirName.startsWith('.') &&
                dirName !== 'config' &&
                dirName !== 'node_modules' &&
                !parentDirs.includes(dirName));
        });
        const unprocessedComponents = collections_1.ComponentSet.fromSource({ fsPaths, include: filterSet })
            .getSourceComponents()
            .filter((component) => !this.state.claimed[component.xml]);
        return unprocessedComponents.toArray();
    }
    /**
     * Returns the children of "unprocessed components"
     */
    async getChildrenOfUnprocessedComponents(unprocessedComponents) {
        const childrenOfUnprocessed = [];
        for (const component of unprocessedComponents) {
            for (const child of component.getChildren()) {
                const xml = await child.parseXml();
                const childName = (0, ts_types_1.getString)(xml, child.type.uniqueIdElement);
                childrenOfUnprocessed.push(childName);
            }
        }
        return childrenOfUnprocessed;
    }
    async recompose(children, parentSourceComponent) {
        const parentXmlObj = parentSourceComponent.type.strategies.recomposition === "startEmpty" /* StartEmpty */
            ? {}
            : await parentSourceComponent.parseXml();
        const groupName = parentSourceComponent.type.directoryName;
        const parentName = parentSourceComponent.type.name;
        for (const child of children) {
            if (!parentXmlObj[parentName]) {
                parentXmlObj[parentName] = { [common_1.XML_NS_KEY]: common_1.XML_NS_URL };
            }
            const parent = parentXmlObj[parentName];
            if (!parent[groupName]) {
                parent[groupName] = [];
            }
            const group = (0, utils_1.normalizeToArray)(parent[groupName]);
            group.push(child);
        }
        return parentXmlObj;
    }
    getDefaultOutput(component) {
        const { fullName } = component;
        const [baseName] = fullName.split('.');
        const output = `${baseName}.${component.type.suffix}${common_1.META_XML_SUFFIX}`;
        return (0, path_1.join)(component.getPackageRelativePath('', 'source'), output);
    }
    getClaimedChildrenNames() {
        return Object.values(this.state.claimed).reduce((x, y) => x.concat(Object.keys(y.children)), []);
    }
    getParentsOfClaimedChildren() {
        return Object.values(this.state.claimed).reduce((x, y) => x.concat([y.parent]), []);
    }
}
/**
 * A state manager over the course of a single metadata conversion call.
 */
class ConvertContext {
    constructor() {
        this.decomposition = new DecompositionFinalizer();
        this.recomposition = new RecompositionFinalizer();
        this.nonDecomposition = new NonDecompositionFinalizer();
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async *executeFinalizers(defaultDirectory) {
        for (const member of Object.values(this)) {
            if (member instanceof ConvertTransactionFinalizer) {
                yield member.finalize(defaultDirectory);
            }
        }
    }
}
exports.ConvertContext = ConvertContext;
//# sourceMappingURL=convertContext.js.map