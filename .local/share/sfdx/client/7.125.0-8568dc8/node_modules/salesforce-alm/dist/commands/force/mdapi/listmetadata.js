"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MdapiListmetadataCommand = void 0;
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../lib/messages");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const messages = Messages();
class MdapiListmetadataCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const MdapiListmetadataCommandImpl = require('../../../lib/mdapi/mdapiListmetadataCommand');
        return this.execLegacyCommand(new MdapiListmetadataCommandImpl(context), context);
    }
}
exports.MdapiListmetadataCommand = MdapiListmetadataCommand;
MdapiListmetadataCommand.theDescription = messages.getMessage('mdListmetadataCommandCliDescription');
MdapiListmetadataCommand.longDescription = messages.getMessage('mdListmetadataCommandCliLong');
MdapiListmetadataCommand.help = messages.getMessage('mdListmetadataCommandCliHelp');
MdapiListmetadataCommand.requiresProject = false;
MdapiListmetadataCommand.requiresUsername = true;
MdapiListmetadataCommand.flagsConfig = {
    apiversion: command_1.flags.builtin({
        // @ts-ignore force char override for backward compat -- don't try this at home!
        char: 'a',
        description: messages.getMessage('mdListmetadataCommandCliApiVersion'),
        longDescription: messages.getMessage('mdListmetadataCommandCliApiVersionLong'),
    }),
    resultfile: command_1.flags.filepath({
        char: 'f',
        description: messages.getMessage('mdListmetadataCommandCliResultFile'),
        longDescription: messages.getMessage('mdListmetadataCommandCliResultFileLong'),
        required: false,
    }),
    metadatatype: command_1.flags.string({
        char: 'm',
        description: messages.getMessage('mdListmetadataCommandCliMetadatatype'),
        longDescription: messages.getMessage('mdListmetadataCommandCliMetadatatypeLong'),
        required: true,
    }),
    folder: command_1.flags.string({
        description: messages.getMessage('mdListmetadataCommandCliFolder'),
        longDescription: messages.getMessage('mdListmetadataCommandCliFolderLong'),
        required: false,
    }),
};

//# sourceMappingURL=listmetadata.js.map
