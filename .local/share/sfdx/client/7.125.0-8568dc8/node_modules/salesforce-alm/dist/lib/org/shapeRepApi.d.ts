import { Org } from '@salesforce/core';
import { RecordResult } from 'jsforce';
interface ShapeRepresentation {
    Id: string;
    Status: string;
    Edition: string;
    Features: string;
    Settings: string;
    CreatedDate: string;
    Description: string;
}
/**
 * Shape API object, for all of your ShapeRepresentation needs
 *
 * @constructor
 * @param shapeOrg The org we'll be querying against
 */
declare class ShapeRepresentationApi {
    private conn;
    constructor(shapeOrg: Org);
    create(description?: string): Promise<RecordResult>;
    /**
     * Delete all ShapeRepresentation records for the shapeOrg.
     *
     * @return List of SR IDs that were deleted
     */
    deleteAll(): Promise<string[]>;
    /**
     * Find all ShapeRepresentation records with a state of Active or InProgress.
     *
     * @return SOQL response or null
     */
    findShapesOrNull(): Promise<unknown[]>;
    /**
     * Check if the ShapeExportPilot preference is enabled.
     */
    isFeatureEnabled(): Promise<boolean>;
    isFeatureEnabledBefore48(): Promise<boolean>;
    isFeatureEnabledAfter48(): Promise<boolean>;
    isShapeId(shapeId: string): boolean;
    getShapeRepresentation(shapeId: string): Promise<ShapeRepresentation>;
}
export { ShapeRepresentationApi };
