"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteScratchOrgFromDevHub = void 0;
// Local
const core_1 = require("@salesforce/core");
const core_2 = require("@salesforce/core");
const connection_1 = require("@salesforce/core/lib/connection");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('salesforce-alm', 'org_delete');
//  * Perform the delete of a scratch org.
//  *
//  * @scratchOrg {object} The scratchOrg to delete
//  */
exports.deleteScratchOrgFromDevHub = async (scratchOrg, hubOrg) => {
    const logger = await core_2.Logger.child('deleteScratchOrg');
    // if we didn't get a hubOrg, we'll get it from the scratchOrg which is required
    hubOrg = hubOrg !== null && hubOrg !== void 0 ? hubOrg : (await scratchOrg.getDevHubOrg());
    if (hubOrg.getOrgId() === scratchOrg.getOrgId()) {
        throw new core_1.SfdxError(messages.getMessage('deleteOrgHubError'), 'deleteOrgHubError');
    }
    const hubOrgConn = hubOrg.getConnection();
    try {
        const activeScratchOrgRecordId = (await hubOrgConn.singleRecordQuery(`SELECT Id FROM ActiveScratchOrg WHERE SignupUsername='${scratchOrg.getUsername()}'`)).Id;
        logger.trace(`found matching ActiveScratchOrg with SignupUsername: ${scratchOrg.getUsername()}.  Deleting...`);
        await hubOrgConn.delete('ActiveScratchOrg', activeScratchOrgRecordId);
    }
    catch (err) {
        logger.info(err.message);
        if (err.name === 'INVALID_TYPE' || err.name === 'INSUFFICIENT_ACCESS_OR_READONLY') {
            logger.info('Insufficient privilege to access ActiveScratchOrgs.');
            throw new core_1.SfdxError(messages.getMessage('insufficientAccessToDelete'), 'insufficientAccessToDelete');
        }
        if (err.name === connection_1.SingleRecordQueryErrors.NoRecords) {
            logger.info('The above error can be the result of deleting an expired or already deleted org.');
            logger.info('attempting to cleanup the auth file');
            throw new core_1.SfdxError(messages.getMessage('attemptingToDeleteExpiredOrDeleted'), 'attemptingToDeleteExpiredOrDeleted');
        }
        throw err;
    }
};

//# sourceMappingURL=activeScratchOrgDeleteApi.js.map
