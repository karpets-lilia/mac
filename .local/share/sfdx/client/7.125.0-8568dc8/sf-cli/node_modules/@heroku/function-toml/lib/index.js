"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionToml = void 0;
const Ajv = require("ajv");
const fs = require("fs");
const path = require("path");
const toml = require("toml");
const util = require("util");
const defaultSchemaPath = path.resolve(__dirname, '../schema.json');
const readFile = util.promisify(fs.readFile);
class FunctionToml {
    constructor(schemaPath = defaultSchemaPath) {
        const schemaReader = this.readSchema(schemaPath);
        this.validator = this.createValidator(schemaReader);
    }
    async parseFile(filepath) {
        let fileBuf;
        try {
            fileBuf = await readFile(filepath);
        }
        catch (e) {
            throw new Error(`Invalid function.toml - File Not Found: ${e.message}`);
        }
        let tomlData;
        try {
            tomlData = toml.parse(fileBuf.toString());
        }
        catch (e) {
            throw new Error(`Invalid function.toml - Toml Syntax: ${e.message}`);
        }
        return this.parseData(tomlData);
    }
    async parseData(data) {
        const validate = await this.validator;
        if (validate(data)) {
            return data;
        }
        else {
            let message = 'Invalid function.toml - Schema Violation';
            if (validate.errors) {
                message += ': ';
                message += validate.errors.map(err => {
                    return `${err.dataPath} ${err.message}`;
                }).join(', ');
            }
            throw new Error(message);
        }
    }
    async readSchema(path) {
        let schemaBuf;
        try {
            schemaBuf = await readFile(path);
        }
        catch (e) {
            throw new Error(`Invalid function.toml schema - File Not Found: ${e.message}`);
        }
        try {
            return JSON.parse(schemaBuf.toString());
        }
        catch (e) {
            throw new Error(`Invalid function.toml schema - JSON Syntax ${e.message}`);
        }
    }
    async createValidator(schemaReader) {
        const schema = await schemaReader;
        const ajv = new Ajv();
        return ajv.compile(schema);
    }
}
exports.FunctionToml = FunctionToml;
