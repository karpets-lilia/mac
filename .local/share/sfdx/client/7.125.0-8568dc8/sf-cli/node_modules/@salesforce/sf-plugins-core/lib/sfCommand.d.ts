import { Command, HelpSection, Interfaces } from '@oclif/core';
export interface SfCommandInterface extends Interfaces.Command {
    configurationVariablesSection?: HelpSection;
    envVariablesSection?: HelpSection;
    errorCodes?: HelpSection;
}
/**
 * A base command that provides convenient access to CLI help
 * output formatting. Extend this command and set specific properties
 * to add help sections to the command's help output.
 *
 * @extends @oclif/command
 * @see https://github.com/oclif/command
 */
export declare abstract class SfCommand<T> extends Command {
    static enableJsonFlag: boolean;
    static configurationVariablesSection?: HelpSection;
    static envVariablesSection?: HelpSection;
    static errorCodes?: HelpSection;
    private warnings;
    /**
     * Log warning to users. If --json is enabled, then the warning
     * will be added to the json output under the warnings property.
     */
    warn(input: SfCommand.Warning): SfCommand.Warning;
    /**
     * Warn user about sensitive information (access tokens, etc...) before
     * logging to the console.
     */
    logSensitive(msg?: string): void;
    /**
     * Wrap the command result into the standardized JSON structure.
     */
    protected toSuccessJson(result: T): SfCommand.Json<T>;
    /**
     * Wrap the command error into the standardized JSON structure.
     */
    protected toErrorJson(error: Error): SfCommand.Error;
    abstract run(): Promise<T>;
}
export declare namespace SfCommand {
    type Warning = string | Error;
    interface Json<T> {
        status: number;
        result: T;
        warnings?: Warning[];
    }
    interface Error {
        status: number;
        name: string;
        message: string;
        stack: string | undefined;
        warnings?: Warning[];
    }
}
