"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SfCommand = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/sf-plugins-core', 'messages');
/**
 * A base command that provides convenient access to CLI help
 * output formatting. Extend this command and set specific properties
 * to add help sections to the command's help output.
 *
 * @extends @oclif/command
 * @see https://github.com/oclif/command
 */
class SfCommand extends core_1.Command {
    constructor() {
        super(...arguments);
        this.warnings = [];
    }
    /**
     * Log warning to users. If --json is enabled, then the warning
     * will be added to the json output under the warnings property.
     */
    warn(input) {
        const warning = super.warn(input);
        this.warnings.push(warning);
        return input;
    }
    /**
     * Warn user about sensitive information (access tokens, etc...) before
     * logging to the console.
     */
    logSensitive(msg) {
        this.warn(messages.getMessage('warning.security'));
        this.log(msg);
    }
    /**
     * Wrap the command result into the standardized JSON structure.
     */
    toSuccessJson(result) {
        var _a;
        return {
            status: (_a = process.exitCode) !== null && _a !== void 0 ? _a : 0,
            result,
            warnings: this.warnings,
        };
    }
    /**
     * Wrap the command error into the standardized JSON structure.
     */
    toErrorJson(error) {
        var _a;
        return {
            status: (_a = process.exitCode) !== null && _a !== void 0 ? _a : 1,
            stack: error.stack,
            name: error.name,
            message: error.message,
            warnings: this.warnings,
        };
    }
}
exports.SfCommand = SfCommand;
SfCommand.enableJsonFlag = true;
//# sourceMappingURL=sfCommand.js.map