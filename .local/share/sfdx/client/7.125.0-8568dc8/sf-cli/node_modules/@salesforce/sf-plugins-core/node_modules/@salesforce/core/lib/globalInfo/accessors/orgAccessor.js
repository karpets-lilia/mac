"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgAccessor = void 0;
const types_1 = require("../types");
class OrgAccessor {
    constructor(globalInfo) {
        this.globalInfo = globalInfo;
    }
    getAll(decrypt = false) {
        return this.globalInfo.get(types_1.SfInfoKeys.ORGS, decrypt);
    }
    get(username, decrypt = false) {
        const auth = this.globalInfo.get(`${types_1.SfInfoKeys.ORGS}["${username}"]`, decrypt);
        // For legacy, some things wants the username in the returned auth info.
        if (auth && !auth.username)
            auth.username = username;
        return auth;
    }
    has(username) {
        return !!this.getAll()[username];
    }
    set(username, org) {
        // For legacy, and to keep things standard, some things wants the username in auth info.
        if (!org.username)
            org.username = username;
        this.globalInfo.set(`${types_1.SfInfoKeys.ORGS}["${username}"]`, org);
    }
    update(username, org) {
        // For legacy, and to keep things standard, some things wants the username in auth info.
        if (!org.username)
            org.username = username;
        this.globalInfo.update(`${types_1.SfInfoKeys.ORGS}["${username}"]`, org);
    }
    unset(username) {
        delete this.globalInfo.get(types_1.SfInfoKeys.ORGS)[username];
    }
}
exports.OrgAccessor = OrgAccessor;
//# sourceMappingURL=orgAccessor.js.map