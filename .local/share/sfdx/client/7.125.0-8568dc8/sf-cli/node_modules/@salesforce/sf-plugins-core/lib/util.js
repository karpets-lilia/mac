"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.toHelpSection = exports.generateTableChoices = void 0;
const inquirer_1 = require("inquirer");
const ts_types_1 = require("@salesforce/ts-types");
const core_1 = require("@salesforce/core");
const core_2 = require("@salesforce/core");
const core_3 = require("@salesforce/core");
/**
 * Generate a formatted table for list and checkbox prompts
 *
 * Each option should contain the same keys as specified in columns.
 * For example,
 * const columns = { name: 'Name', type: 'Type', path: 'Path' };
 * const options = [{ name: 'foo', type: 'org', path: '/path/to/foo/' }];
 * generateTableChoices(columns, options);
 */
function generateTableChoices(columns, choices, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
padForCheckbox = true) {
    const columnEntries = Object.entries(columns);
    const columnLengths = columnEntries.map(([key, value]) => Math.max(ts_types_1.ensureString(value).length, ...choices.map((option) => ts_types_1.ensureString(option[key], `Type ${typeof option[key]} for ${key} in ${Object.keys(option).join(', ')}`)
        .length)) + 1);
    const choicesOptions = [
        new inquirer_1.Separator(`${padForCheckbox ? ' '.repeat(2) : ''}${columnEntries
            .map(([, value], index) => value === null || value === void 0 ? void 0 : value.padEnd(columnLengths[index], ' '))
            .join('')}`),
    ];
    for (const meta of choices) {
        const name = columnEntries
            .map(([key], index) => ts_types_1.ensureString(meta[key]).padEnd(columnLengths[index], ' '))
            .join('');
        const choice = { name, value: meta.value, short: ts_types_1.ensureString(meta.name) };
        choicesOptions.push(choice);
    }
    return choicesOptions;
}
exports.generateTableChoices = generateTableChoices;
/**
 * Function to build a help section for command help.
 * Takes a string to be used as section header text and an array of enums
 * that identify the variable or property to be included in the help
 * body.
 *
 * @param header
 * @param vars
 */
function toHelpSection(header, ...vars) {
    const body = vars
        .map((v) => {
        const orgConfig = core_1.ORG_CONFIG_ALLOWED_PROPERTIES.find(({ key }) => {
            return key === v;
        });
        if (orgConfig) {
            return { name: orgConfig.key, description: orgConfig.description };
        }
        const sfdxProperty = core_2.SFDX_ALLOWED_PROPERTIES.find(({ key }) => key === v);
        if (sfdxProperty) {
            return { name: sfdxProperty.key.valueOf(), description: sfdxProperty.description };
        }
        const envVar = Object.entries(core_3.SUPPORTED_ENV_VARS).find(([k]) => k === v);
        if (envVar) {
            const [eKey, data] = envVar;
            return { name: eKey, description: data.description };
        }
        return undefined;
    })
        .filter((b) => b);
    return { header, body };
}
exports.toHelpSection = toHelpSection;
//# sourceMappingURL=util.js.map